# CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details

version: 2

.working-directory: &working_directory
  working_directory: ~/repo

.docker: &docker
  docker:
    - image: circleci/node:8

.restore-cache: &restore_cache
  restore_cache:
    name: Restoring Node Modules Cache
    keys:
      - v1-node_modules-{{ checksum "yarn.lock" }}
      # fallback to using the latest cache if no exact match is found
      - v1-node_modules-

.setup-junit-environment: &setup_junit_environment
  run:
    name: Setting up JUnit Environment
    command: |
      echo "CIRCLE_TEST_REPORTS=${CIRCLE_TEST_REPORTS:-/tmp/circle-test-reports}" >> "${BASH_ENV}"
      echo "TEST_REPORT_FILENAME=${TEST_REPORT_FILENAME:-junit.xml}" >> "${BASH_ENV}"
      source "${BASH_ENV}"
      echo "TEST_REPORT_PATH=${CIRCLE_TEST_REPORTS}/${CIRCLE_JOB}" >> "${BASH_ENV}"
      source "${BASH_ENV}"
      echo "TEST_REPORT_FILEPATH=${TEST_REPORT_PATH}/${TEST_REPORT_FILENAME}" >> "${BASH_ENV}"
      source "${BASH_ENV}"
      mkdir -p "${TEST_REPORT_PATH}"

.junit-store-test-results: &junit_store_test_results
  store_test_results:
    path: /tmp/circle-test-reports

.setup-yarn-global: &setup_yarn_global
  run:
    name: Setting up Yarn Global Environment
    command: |
      echo "PATH=${PATH}:$(yarn global bin)" >> "${BASH_ENV}"

.setup-git: &setup_git
  run:
    name: Setting git Environment
    command: |
      echo "GH_USER=$(curl -H "Authorization: bearer ${GH_TOKEN}" -d '{ "query": "query { viewer { login } }" }' https://api.github.com/graphql | jq -r .data.viewer.login)" >> "${BASH_ENV}"
      source "${BASH_ENV}"
      echo "GH_EMAIL=${GH_USER}@ef.com" >> "${BASH_ENV}"
      source "${BASH_ENV}"
      git config user.name "${GH_USER}"
      git config user.email "${GH_EMAIL}"

jobs:
  dependencies:
    <<: *working_directory
    <<: *docker
    steps:
      - checkout
      - run:
          name: Node version
          command: |
            node --version
            yarn --version
      - <<: *restore_cache
      - run:
          name: Adding Greenkeeper Lockfile Dependency
          command: yarn global add greenkeeper-lockfile@1
      - <<: *setup_yarn_global
      - run:
          name: Installing Dependencies
          command: yarn install
      - run:
          name: Updating Greenkeeper Lock File
          command: greenkeeper-lockfile-update
      - save_cache:
          name: Saving Node Modules Cache
          paths:
            - node_modules
          key: v1-node_modules-{{ checksum "yarn.lock" }}
      - run:
          name: Uploading Greenkeeper Lock File
          command: greenkeeper-lockfile-upload

  lint:format:
    <<: *working_directory
    <<: *docker
    steps:
      - checkout
      - <<: *restore_cache
      - run:
          name: lint:format
          command: yarn lint:format

  lint:commit:
    <<: *working_directory
    <<: *docker
    steps:
      - checkout
      - <<: *restore_cache
      - run:
          name: lint:commit
          command: yarn lint:commit

  build:
    <<: *working_directory
    <<: *docker
    steps:
      - checkout
      - <<: *restore_cache
      - run:
          name: Building
          command: yarn build

  lint:ts:
    <<: *working_directory
    <<: *docker
    steps:
      - checkout
      - <<: *restore_cache
      - <<: *setup_junit_environment
      - run:
          name: Linting
          command: yarn lint:ts
      - run:
          name: JUnit Output
          environment:
            JUNIT_FORMATTER: node_modules/tslint-junit-formatter/formatters
          command: |
            yarn lint:ts --formatters-dir "${JUNIT_FORMATTER}" --format junit --out "${TEST_REPORT_FILEPATH}" --force
          when: always
      - <<: *junit_store_test_results

  docs:
    <<: *working_directory
    <<: *docker
    steps:
      - checkout
      - <<: *restore_cache
      - run:
          name: Documentation
          command: yarn docs
      - store_artifacts:
          path: dist/docs
          destination: documentation

  test:
    <<: *working_directory
    <<: *docker
    steps:
      - checkout
      - <<: *restore_cache
      - <<: *setup_junit_environment
      - run:
          name: Tests
          command: yarn test --ci
      - run:
          name: JUnit Output
          environment:
            JUNIT_REPORTER: ./node_modules/jest-junit-reporter
          command: yarn test --ci --silent "--testResultsProcessor=${JUNIT_REPORTER}"
          when: always
      - <<: *junit_store_test_results

  coverage:
    <<: *working_directory
    <<: *docker
    steps:
      - checkout
      - <<: *restore_cache
      - run:
          name: Coverage
          command: yarn coverage
      - run:
          name: Upload
          command: yarn codecov

  release:
    <<: *working_directory
    <<: *docker
    steps:
      - checkout
      - <<: *restore_cache
      - run:
          name: Release
          command: npx semantic-release

  githubPages:
    <<: *working_directory
    <<: *docker
    steps:
      - checkout
      - <<: *restore_cache
      - run:
          name: Documentation
          command: yarn docs
      - run:
          name: Jekyll Suppression
          command: touch dist/docs/.nojekyll
      - <<: *setup_git
      - run:
          name: Upload
          command: |
            git add --force dist/docs
            git commit --message 'chore(docs): update documentation [skip ci]'
            git subtree split --prefix dist/docs --branch gh-pages
            git push --force origin gh-pages

workflows:
  version: 2
  build:
    jobs:
      - dependencies
      - lint:ts:
          requires:
            - dependencies
      - lint:format:
          requires:
            - dependencies
      - lint:commit:
          requires:
            - dependencies
      - docs:
          requires:
            - lint:ts
      - build:
          requires:
            - lint:ts
      - test:
          requires:
            - build
      - coverage:
          requires:
            - test
      - release:
          requires:
            - test
          filters:
            branches:
              only:
                - master
      - githubPages:
          requires:
            - test
          filters:
            branches:
              only:
                - master
